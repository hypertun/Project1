// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "Project1/models"

	sqlx "github.com/jmoiron/sqlx"
)

// DatabaseInterface is an autogenerated mock type for the DatabaseInterface type
type DatabaseInterface struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *DatabaseInterface) Begin(ctx context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByID provides a mock function with given fields: ctx, ID
func (_m *DatabaseInterface) GetAccountsByID(ctx context.Context, ID int) (models.Account, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByID")
	}

	var r0 models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Account, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Account); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccounts provides a mock function with given fields: ctx, req
func (_m *DatabaseInterface) InsertAccounts(ctx context.Context, req models.Accounts) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Accounts) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTransactions provides a mock function with given fields: ctx, tx, req
func (_m *DatabaseInterface) InsertTransactions(ctx context.Context, tx *sqlx.Tx, req models.Transactions) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, models.Transactions) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccounts provides a mock function with given fields: ctx, tx, req
func (_m *DatabaseInterface) UpdateAccounts(ctx context.Context, tx *sqlx.Tx, req models.Account) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, models.Account) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabaseInterface creates a new instance of DatabaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseInterface {
	mock := &DatabaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
